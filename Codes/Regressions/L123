# -*- coding: utf-8 -*-
"""
Created on Mon Jul 24 22:55:38 2023

@author: RL46RG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Lasso, Ridge, ElasticNet
from sklearn.preprocessing import StandardScaler
import matplotlib.dates as mdates


# Load CSV data
data = pd.read_csv(r'C:\Users\RL46RG\KL\Thesis\data\7instr.csv', parse_dates=[0], index_col=0)
data = data.fillna(0)

# Define the predictor (ROR) and explanatory variables
predictor = 'ROR'
explanatory_vars = data.columns[1:]

# Initialize the window sizes to be tested
window_sizes = [5, 10]

# Function to perform rolling regression and get predicted ROR values
def get_predicted_ROR(window_size, regularization):
    predicted_ROR = []
    for i in range(len(data) - window_size):
        window_data = data.iloc[i:i+window_size]
        X = window_data[explanatory_vars].values
        y = window_data[predictor].values

        # Standardize the data
        scaler = StandardScaler()
        X = scaler.fit_transform(X)
        y = scaler.fit_transform(y.reshape(-1, 1)).flatten()

        if regularization == 'L1':
            model = Lasso(alpha=1.0)
        elif regularization == 'L2':
            model = Ridge(alpha=1.0)
        elif regularization == 'ElasticNet':
            model = ElasticNet(alpha=1.0, l1_ratio=0.5)

        model.fit(X, y)
        predicted_ROR.extend(model.predict(X[-1].reshape(1, -1)))

    return predicted_ROR

# Perform Rolling Regression with L1 regularization and get predicted ROR values
predicted_ROR_l1_5 = get_predicted_ROR(window_size=5, regularization='L1')
predicted_ROR_l1_10 = get_predicted_ROR(window_size=10, regularization='L1')

# Perform Rolling Regression with L2 regularization and get predicted ROR values
predicted_ROR_l2_5 = get_predicted_ROR(window_size=5, regularization='L2')
predicted_ROR_l2_10 = get_predicted_ROR(window_size=10, regularization='L2')

# Perform Rolling Regression with Elastic Net regularization and get predicted ROR values
predicted_ROR_en_5 = get_predicted_ROR(window_size=5, regularization='ElasticNet')
predicted_ROR_en_10 = get_predicted_ROR(window_size=10, regularization='ElasticNet')

# Plot actual ROR values and predicted ROR values for both window sizes
plt.figure(figsize=(100, 20))
plt.plot(data.index[5:], data['ROR'][5:], label='Actual ROR', color='blue')
plt.plot(data.index[5:], predicted_ROR_l1_5, label='Predicted ROR (L1, Window 5)', linestyle='dashed', color='green')
plt.plot(data.index[10:], predicted_ROR_l1_10, label='Predicted ROR (L1, Window 10)', linestyle='dashed', color='orange')
plt.plot(data.index[5:], predicted_ROR_l2_5, label='Predicted ROR (L2, Window 5)', linestyle='dashed', color='red')
plt.plot(data.index[10:], predicted_ROR_l2_10, label='Predicted ROR (L2, Window 10)', linestyle='dashed', color='purple')
plt.plot(data.index[5:], predicted_ROR_en_5, label='Predicted ROR (Elastic Net, Window 5)', linestyle='dashed', color='cyan')
plt.plot(data.index[10:], predicted_ROR_en_10, label='Predicted ROR (Elastic Net, Window 10)', linestyle='dashed', color='magenta')

plt.xlabel('Time')
plt.ylabel('ROR')
plt.title('Actual vs. Predicted ROR values for Rolling Regression with Regularization')
plt.legend()
plt.grid(True)

# Set x-axis to display years from 2000 to 2024 every year
years = mdates.YearLocator()
years_fmt = mdates.DateFormatter('%Y')
plt.gca().xaxis.set_major_locator(years)
plt.gca().xaxis.set_major_formatter(years_fmt)
plt.show()
