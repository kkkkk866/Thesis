# -*- coding: utf-8 -*-
"""
Created on Thu Jul 27 11:17:00 2023

@author: kanr8
"""

import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
from statsmodels.regression.rolling import RollingOLS, RollingWLS
import matplotlib.dates as mdates
from sklearn.metrics import mean_squared_error

# Load the data
df = pd.read_csv('D:\\2022-2023\\thesis\\regression\\7instr.csv')

df = df.fillna(0)

# Parse the 'date' column to datetime
df['date'] = pd.to_datetime(df['date'])

# Set the 'date' column as the index
df.set_index('date', inplace=True)

# Define the dependent variable
y = df['ROR']

# Define the independent variables
X = sm.add_constant(df.drop('ROR', axis=1))  # Our model needs an intercept so we add a constant

# Window sizes
windows = [10, 20, 50]

# Create the figure and plot the actual ROR
plt.figure(figsize=(100, 20))
plt.plot(df.index, df['ROR'], label='Actual ROR')

# Apply the models for each window size
for window in windows:
    # Rolling OLS
    model_ols = RollingOLS(y, X, window=window)
    res_ols = model_ols.fit()
    
    # For each fitted model, calculate the predicted values (fitted values)
    df[f'fitted_ROR_ols_{window}'] = (X * res_ols.params).sum(axis=1)

    # Add to the plot
    plt.plot(df.index, df[f'fitted_ROR_ols_{window}'], label=f'Fitted ROR OLS - Window {window}')
    
    # Calculate and print the MSE
    mse_ols = mean_squared_error(y[window-1:], df[f'fitted_ROR_ols_{window}'][window-1:])  # Remove the first 'window-1' observations, because the model is not defined for them
    print(f'MSE for OLS - Window {window}: {mse_ols}')

    # Rolling WLS
    model_wls = RollingWLS(y, X, window=window, weights=np.random.rand(len(y)))
    res_wls = model_wls.fit()
    
    # For each fitted model, calculate the predicted values (fitted values)
    df[f'fitted_ROR_wls_{window}'] = (X * res_wls.params).sum(axis=1)

    # Add to the plot
    plt.plot(df.index, df[f'fitted_ROR_wls_{window}'], label=f'Fitted ROR WLS - Window {window}')

    # Calculate and print the MSE
    mse_wls = mean_squared_error(y[window-1:], df[f'fitted_ROR_wls_{window}'][window-1:])  # Remove the first 'window-1' observations, because the model is not defined for them
    print(f'MSE for WLS - Window {window}: {mse_wls}')

# Set x-axis to display years from 2000 to 2024 every year
years = mdates.YearLocator()
years_fmt = mdates.DateFormatter('%Y')
plt.gca().xaxis.set_major_locator(years)
plt.gca().xaxis.set_major_formatter(years_fmt)

plt.legend()
plt.title('ROR vs Fitted ROR')
plt.xlabel('Date')
plt.ylabel('ROR')

plt.show()
